// policies_data_source.go
package policies

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/deploymenttheory/go-api-sdk-jamfpro/sdk/jamfpro"
	"github.com/deploymenttheory/terraform-provider-jamfpro/internal/client"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/retry"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// DataSourceJamfProPolicies provides information about specific Jamf Pro policies by their ID or Name.
func DataSourceJamfProPolicies() *schema.Resource {
	return &schema.Resource{
		ReadContext: DataSourceJamfProPoliciesRead,
		Timeouts: &schema.ResourceTimeout{
			Read: schema.DefaultTimeout(1 * time.Minute),
		},
		Schema: map[string]*schema.Schema{
			"general": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "General settings of the policy.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The unique identifier of the Jamf Pro policy.",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The name of the policy.",
						},
					},
				},
			},
		},
	}
}

// DataSourceJamfProPoliciesRead fetches the details of specific policy items from Jamf Pro using either their unique Name or Id.
func DataSourceJamfProPoliciesRead(ctx context.Context, d *schema.ResourceData, meta interface{}, cleanup bool) diag.Diagnostics {
	// Initialize API client
	client, ok := meta.(*jamfpro.Client)
	if !ok {
		return diag.Errorf("error asserting meta as *client.client")
	}
	

	// Initialize variables
	var diags diag.Diagnostics
	resourceID := d.Id()

	// Convert resourceID from string to int
	resourceIDInt, err := strconv.Atoi(resourceID)
	if err != nil {
		return diag.FromErr(fmt.Errorf("error converting resource ID '%s' to int: %v", resourceID, err))
	}

	var policy *jamfpro.ResourcePolicy

	// Extract policy name from schema
	var policyName string
	if generalSettings, ok := d.GetOk("general"); ok && len(generalSettings.([]interface{})) > 0 {
		generalMap := generalSettings.([]interface{})[0].(map[string]interface{})
		policyName = generalMap["name"].(string)
	}

	// Use the retry function for the read operation
	err = retry.RetryContext(ctx, d.Timeout(schema.TimeoutRead), func() *retry.RetryError {
		var apiErr error
		policy, apiErr = client.GetPolicyByID(resourceIDInt)
		if apiErr != nil {
			// If fetching by ID fails and policyName is available, try fetching by Name
			if policyName != "" {
				policy, apiErr = client.GetPolicyByName(policyName)
			}
			if apiErr != nil {
				// Consider retrying only if it's a retryable error
				return retry.RetryableError(apiErr)
			}
		}
		// Successfully fetched the policy, exit the retry loop
		return nil
	})

	if err != nil {
		d.SetId("") // Remove from Terraform state if unable to read after retries
		return diag.FromErr(fmt.Errorf("failed to read Jamf Pro Policy '%s' (ID: %d) after retries: %v", policyName, resourceIDInt, err))
	}

	// Check if policy data exists and set the Terraform state
	if policy != nil {
		d.SetId(resourceID) // Confirm the ID in the Terraform state
		if err := d.Set("name", policy.General.Name); err != nil {
			diags = append(diags, diag.FromErr(fmt.Errorf("error setting 'name' for Jamf Pro Policy with ID '%s': %v", resourceID, err))...)
		}
		// Set other attributes of the policy as needed
	} else {
		d.SetId("") // Data not found, unset the ID in the Terraform state
	}

	return diags
}
